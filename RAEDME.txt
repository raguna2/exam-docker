#dockerによる開発環境整備の流れ

#任意のフォルダにこのdocker-djangoフォルダを格納
#dockerfileのあるファイル上で

#docker build -t montage-image:1.0 ./

#と入力し、イメージを作成（上記の文言はこの後説明する自動化したプログラムを壊すので変えないこと）
#-v /Users/kutsumi/docker-django/montage/:/var/www/app/ \となっているところの
#</Users/kutsumi/docker-django/>の部分をdockerfileを置いたフォルダの場所に書き換えてください。

#その後
#bash setupfile

#と入力するとコンテナ（作業できるLINUX環境）が作成されてそこのbashに入った状態になります。
#bashに入ったら、下記コマンドを入力し、指示どおりに入力していってください。

#bash after_docker_run_exec

#ちなみにpostgresのパスワードを求められるのでそこは任意のパスワードでOKです。

#もし途中でなんか変になったと思ったら、exitで一度抜けましょう。
#自分のmac環境に戻ってきたら

# docker rm montage

#と入力して、再度初めからやり直せばOK

#データベースのマイグレーションまで終わったら、ブラウザで画面が見れるか確認しましょう。
#このあたりも指示通りやればわかると思う。

# 二回目以降の入り方
# exitで抜けると自動的にコンテナが停止します。
# そのため、次回起動時は

# docker ps -a
#にてコンテナが動いているか確認（upなら起動中、exitedなら停止中）
# 動いていない場合
# docker start montage
# で起動させる。

# コンテナが起動している状態で
# docker exec -it montage /bin/bash
# と入力すると中に入れます。

#　注意！　一度コンテナを停止させるとpostgresも停止します。
# そのため 一度コンテナが停止したら、

# service postgresql start

# と入力し、起動させる必要があります。ここはいつか自動化したい。
# 先程のコマンドは面倒なのでエイリアスを入れておきました。

# psqlup で起動します。


#---------------------------------------------------------------------------------
#vimrc,bashrc,bash_profileは九津見が使っているものを指定しています。
#変えたい場合は /root/　以下に配置してあるので自由に変えて下さい。

# 注意！　.bashrc にはエイリアスを記載しています。
#　例えば一番最初にブラウザで起動の確認をするためのコマンド djangos はbashrcで指定してあるエイリアスです。
#  djangos は　python manage.py runserver 0.0.0.0:8000 を短くしているものです。
# 自分でbashrcを指定する場合はこのあたりの設定が飛ばないよう気をつけましょう。

# vimmer の皆さんへ。

# vimmer のためにvim8.0を既にダウンロードしてあります。
# neobundleも導入してあるため、初回vim起動時は :NeoBundleUpdate をお願いします。
# vimrc　は九津見のものを導入しているので、好きなように変えて下さい。


# 注意！ この開発環境はdebianを利用しています。
# そのため、yum installは利用不可です。代わりに apt-get install -y ＊＊＊ を利用して下さい。
